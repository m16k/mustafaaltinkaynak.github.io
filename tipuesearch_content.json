{"pages":[{"url":"https://www.mustafa.com.tr/pages/about.html","text":"2004 yılından bu yana siber güvenlik üzerine araştırmalarda bulundum. Çok sayıda yerli yada yabancı websitelerinde bulunan zafiyetleri ilgililere göndererek kapatılmasını sağladım. Bu siteler içerisinde ülkemizde eğitim veren üniversiteler, kurumsal firmaları, devlet kurumları sistemleri bulunmaktadır. Bu bildirimler sonucunda naçizane bir ödül olarak ilgili kurumların yetkililerince verilmiş olan çok sayıda teşekkür belgem bulunmaktadır. İşimden arta kalan vakitlerimde üniversitelerde, eğitim öğretim kurumlarında, firmalarda web ve bilgi güvenliği üzerine seminer, sunum ve konferanslar vermekteyim. Octosec bilgi güvenliği grubu üyesiyim. Herhangi bir konuda bana iletişim sayfasından ya da linkedin profilimden ulaşabilirsiniz. Eğitmen 2016: Güvenlik 101 - Uzem Yazılım Kampı - Samsun 2016: Web Uygulama Güvenliği - Hacktrick'16 Güvenlik Konferansı - Eskişehir Anadolu Üniv. 2016: Web Uygulama Güvenliği - Hacker Kamp - Sakarya Üniversitesi 2016: Enine Boyuna Siber Güvenlik - Hacker Kamp - İstanbul Üniversitesi 2016: Enine Boyuna Siber Güvenlik - Akademik Bilişim 2016 - Aydın 2015: Uygulamalı Sızma Testi - İzHack 2015 - İzmir 2015: Uygulamalı Sızma Testi - OMÜ Hacker Kamp 2015 - Samsun 2015: Güvenlik 101 - UZEM Yazılım Kampı - Samsun 2015: Web Uygulama Güvenliği - Hacktrick'15 Güvenlik Konferansı - İstanbul Sunum 2015: Devlet Kurumları ve Siber Güvenlik - Hacktrick'15 Güvenlik Konferansı - İstanbul 2015: Kamu Güvenliğini Sağlamada Siber İstihbaratın Rolü - Akademik Bilişim - Aydın 2012: Sosyal Medya ve Erişim Riskleri - İlkadım TML, EML - Samsun 2011: Ağ Güvenliği ve Sızma Testleri - Ondokuz Mayıs Üniversitesi - Samsun 2011: Kullanıcı Güvenliği - Ondokuz Mayıs Üniversitesi - Samsun 2008: Web Güvenlik Semineri - Samsun Katılımcı 2015: Siber Güvenlik Kış Kampı - Kayseri 2014: Hacktrick'14 Güvenlik Konferansı 2014: Güvenlik 101 - Akademik Bilişim - Mersin 2013: Comodo - Siber Güvenlik ve Hacking - Samsun 2011: Microsoft Web Erişim Riskleri - İstanbul 2011: Bilişim Güvenliği Zirvesi - İstanbul Sertifikasyon ve Yarışma 2014: TSE Sızma Testi Uzmanlığı (Sistem) 2014: TSE Sızma Testi Uzmanlığı (Web) 2014: Siber Meydan 2014 (CTF) 2009: Proje Tabanlı Beceri Yarışması, Samsun birinciliği, Karadeniz Bölgesi üçüncülüğü Son güncellenme tarihi : 11.09.2016","tags":"pages","title":"Hakkımda"},{"url":"https://www.mustafa.com.tr/pages/contact.html","text":"E-posta: mustafa [@] altinkaynak [.] biz circletwitterbird circlegithubalt circlelinkedin","tags":"pages","title":"Contact"},{"url":"https://www.mustafa.com.tr/haproxy-kurulumu-ve-yapilandirma.html","text":"HAProxy nedir? HAProxy (High Availability Proxy), bir yük dengeleme görev yöneticisidir. Birçok servis için yük dengeleme, yüksek erişilebilirlik ve proxy gibi hizmetleri ücretsiz, güvenli olarak sunmaktadır. Stabil versiyonu 1.6'dır. Bu yazı da ise Ubuntu üzerine HAProxy 1.4.24 kurulumu gerçekleştirerek aşağıda yer alan yapıyı oluşturacağız. HAProxy sunucusu: 192.168.1.200 Webserver 1: 192.168.1.201 Webserver 2: 192.168.1.202 Tüm sunuculara web server kurulumunu gerçekleştirdim. HAProxy kurulumu Ubuntu deposunda tanımlı olduğundan dolayı direkt apt-get ile kurabilirsiniz. mustafa @ altinkaynak :/ # apt - get install haproxy Kurulum işleminin ardından aşağıdaki komut ile birlikte versiyon kontrolü sağlayabilirsiniz. mustafa @ altinkaynak :/ # haproxy - v HA - Proxy version 1.4.24 2013 / 06 / 17 Copyright 2000 - 2013 Willy Tarreau < w @ 1 wt . eu > HAProxy'i etkinleştirmek için /etc/default/haproxy dosyasında yer alan ENABLED değerini 1 olarak değiştirmeniz gerekmektedir. ENABLED = 1 Artık HAProxy servisi için etkinlikler geldi. mustafa @ altinkaynak :/ # service haproxy Usage: / etc / init . d / haproxy { start | stop | reload | restart | status } HAProxy yapılandırma Herşeye başlamadan önce mevcut HAProxy konfigurasyon dosyasını yedekleyelim. mv / etc / haproxy / haproxy . cfg {,. original } Artık haproxy.cfg adında yeni bir konfigurasyon dosyası oluşturarak burada işlem gerçekleştirelim. global log / dev / log local0 log 127.0.0.1 local1 notice maxconn 4096 user haproxy group haproxy daemon defaults log global mode http option httplog option dontlognull retries 3 option redispatch maxconn 2000 contimeout 5000 clitimeout 50000 srvtimeout 50000 listen altinkaynak 127.0.0.1 : 80 mode http stats enable stats uri / haproxy ? stats balance roundrobin option httpclose option forwardfor server webserver01 192.168.1.201 : 80 check server webserver02 192.168.1.202 : 80 check Bu sürüm için geçerli konfigurasyon açıklamasına buradan ulaşabilirsiniz. Şimdi HAProxy dashboard sayfamıza göz atalım. Aşağıdaki göreceğiz üzere tüm servislerimiz yerlerini almış ve UP/DOWN durumları zamansal olarak gösterilmiştir. Servisler üzerinde açılan session sayısını da görebilmekteyiz. Sunucuların up/down durumlarında e-posta bildirimi almak isteyebilirsiniz. O zaman güzel bir haber vereyim. HAProxy 1.6 sürümünde bildirim desteği gelmiştir. Ancak 1.4 sürümünde olmadığından dolayı bu yazıda yer veremiyorum. HAProxy'in bize sunmuş olduğu yük dengelemeyi de test edelim. Artık tüm trafiği HAProxy sunucusu üzerine (192.168.1.200) üzerine yönlendiriyoruz. Ben farkı anlayabilmek açısından giriş sayfalarına hangi sunucuya bağlantı yaptığımı yazdırdım. Sonuç olarak HAProxy en uygun olan sunucuya beni yönlendirdi.","tags":"Sistem Yöneticiliği","title":"HAProxy Kurulumu ve Yapılandırma"},{"url":"https://www.mustafa.com.tr/nagios-uzak-sunucu-ekleme.html","text":"Nagios ağ üzerinde bulunan sistemleri monitör etmek için kullanılan bir yazılım olduğunu bir önceki yazılarımda ifade etmiştim. Şimdi nagios üzerine uzak bir sunucuyu kontrol etmek için görev (host, servis) tanımlayalım. Bu yazı da www.mustafa.com.tr adresi için HTTP ve SSH servislerini belirli zaman aralıklarında kontrol etmesini sağlayacağım. Host ve servis tanımlama /etc/nagios3/conf.d dizini altına giderek hostadi_nagios2.cfg adında bir dosya oluşturalım. define host { use generic - host host_name mustafa . com . tr alias mustafa . com . tr } define service { use generic - service ; Name of service template to use host_name mustafa . com . tr service_description HTTP normal_check_interval 2 retry_check_interval 1 flap_detection_enabled 0 max_check_attempts 2 check_command check_http notifications_enabled 1 } define service { use generic - service host_name mustafa . com . tr service_description SSH check_command check_ssh notifications_enabled 1 } Akabinde aşağıdaki komutu çalıştırarak config dosyasının hata kontrolünü sağlayalım. sudo nagios3 - v / etc / nagios3 / nagios . cfg | less Nagios'u yeniden başlatalım. sudo service nagios3 reload Host nagios paneline eklenmiş gözüküyor.","tags":"Sistem Yöneticiliği","title":"Nagios Uzak Sunucu Ekleme"},{"url":"https://www.mustafa.com.tr/slack-fail2ban-entegrasyonu.html","text":"Brute Force Nedir? Saldırganların sıklıkla tercih ettikleri tekniklerden biri de Brute Force adı verilen kaba kuvvet saldırılarıdır. Brute force bir program yardımıyla yapılabileceği gibi el ile de yapılabilir. Brute force saldırılarında kullanıcı adı ve parola bilgisi teker teker denenir. Bu saldırıda başarılı olunabilmesi için en çok kullanılan parola dizilimleri yani sözlük denilen listeler kullanılır. Ne kadar geniş bir sözlük varsa başarıya ulaşma imkanı da o kadar yüksek olur. Uygulamalar brute force saldırılarına yönelik çeşitli aksiyonlar almışlardır. Bazı uygulamalar çok sayıda giriş yapıldığında captcha ile giriş istemekte, bazı uygulamalar ise belirli süre o kullanıcıya ait hesabı kapatmaktadır. Fail2Ban Nedir? Fail2ban sunucu sistemlerinde servislere ait log kayıtlarının takip edilerek gerektiği durumlarda bu kişilere karşı aksiyon almayı sağlar. Bu kişilere yönelik sizin belirlediğiniz süre kadar sisteme girişlerini yasaklar. Fail2ban iptables firewall'a ilgili kuralı dinamik olarak girmektedir. Ek olarak fail2ban tcpwrapper'la da çalışabilmektedir. Şu sıralar epeyi Slack ile haşır neşir olmaya ve gittikçe sevmeye başladım. Şimdi fail2ban'ın almış olduğu aksiyonlardan anında haberdar olabilmek için Slack ile entegrasyon edelim. NOT: Bu tarz durumlar için e-posta kullanmayı pek sevmediğimden dolayı, e-posta ile notification almak istemiyorum. Tercihim bu yüzden Slack'den yana. Fail2ban Slack Entegrasyonu Fail2ban uygulamasına ait yapılandırma ayarları /etc/fail2ban/jail.conf dosyasında tutulmaktadır. Ancak custom (özelleştirilmiş) yapılandırma ihtiyaçlarında bu dosyanın bir kopyası üzerinden devam edilmesi önerilir. cp / etc / fail2ban / jail . conf / etc / fail2ban / jail . local Artık değişikliklerimizi jail.local dosyası üzerinden gerçekleştireceğiz. Slack için action durumunu ayarlayalım. action_with_slack_notification = % ( banaction ) s [ name =% ( __name__ ) s , port = \"%(port)s\" , protocol = \"%(protocol)s\" , chain = \"%(chain)s\" ] slack [ name =% ( __name__ ) s , protocol = \"%(protocol)s\" ] # Choose default action. To change, just override value of 'action' with the # interpolation to the chosen action shortcut (e.g. action_mw, action_mwl, etc) in jail.local # globally (section [DEFAULT]) or per specific section action = % ( action_with_slack_notification ) s Slack için bildirimlerde kullanacağımız betiği oluşturmak için ilgili dizine gidelim. cd / etc / fail2ban / action . d Şimdi slack bildirimleri için slack-notify.sh adında betiğimizi oluşturalım. # !/bin/bash # Dosya: /etc/fail2ban/action.d/slack-notify.sh MESSAGE=$1 HOOK_URL={HOOK_URL} # https://hooks.slack.com/services/1111111/1111111111111 HOST=$(hostname) CHANNEL=\"#alerts\" # Hangi kanala gönderim yapılacak USERNAME=\"fail2ban\" # Hangi kullanıcı adıyla gönderim yapılacak ICON=\":bangbang:\" # Mesajlarda kullanılacak icon -> http://www.webpagefx.com/tools/emoji-cheat-sheet/ if [ \"$#\" -ge 2 ]; then IP=$2 # İsteğin hangi ülkeden geldiği COUNTRY=$(curl ipinfo.io/ ${ IP } /country) COUNTRY=$(echo \" $COUNTRY \" | tr -s '[:upper:]' '[:lower:]') # Ülkeye uygun emoji setleniyor. COUNTRY=\":flag- $COUNTRY :\" MESSAGE=\" ${ MESSAGE / _country_ / $ COUNTRY } \" fi # Curl isteği gerçekleştiriyoruz. curl -X POST --data-urlencode \"payload={\\\"channel\\\": \\\" ${ CHANNEL } \\\", \\\"username\\\": \\\" ${ USERNAME } \\\", \\\"text\\\": \\\"[* ${ HOST } *] ${ MESSAGE } \\\", \\\"icon_emoji\\\": \\\" ${ ICON } \\\"$ exit 0 Bildirim betiğimiz hazır. Şimdi hangi durumlarda çalışması gerektiğini belirliyoruz. # Dosya : / etc / fail2ban / action.d / slack.conf [ Definition ] actioncheck= actionstart = /bin/bash /etc/fail2ban/action.d/slack-notify.sh \"The jail <name> has been started successfully.\" > /dev/null 2> & 1 actionstop = /bin/bash /etc/fail2ban/action.d/slack-notify.sh \"The jail <name> has been stopped.\" > /dev/null 2> & 1 actionban = /bin/bash /etc/fail2ban/action.d/slack-notify.sh \"Banned _country_ <ip> in the jail <name> after <failures> attempts\" \" <ip> \" > /dev/null 2> & 1 actionunban = /bin/bash /etc/fail2ban/action.d/slack-notify.sh \"Unbanned _country_ <ip> in the jail <name> \" \" <ip> \" > /dev/null 2> & 1 # Default name of the chain # name = default Artık servis başladığında, durduğunda, bir kullanıcı sistemden atıldığı ve yasaklamasının kaldırıldığı durumda bildirim gelecektir.","tags":"Sistem Yöneticiliği","title":"[SLACK] Fail2ban Entegrasyonu"},{"url":"https://www.mustafa.com.tr/slack-nagios-entegrasyonu.html","text":"Nagios ağ üzerinde bulunan sistemleri monitör etmek için kullanılan bir yazılımdır. Yazılım sayesinde tüm aktif cihazlarını sizlere sunmuş olduğu arayüz üzerinden monitör edebilirsiniz. Nagios ile birlikte makinalara farklı görev tanımları gerçekleştirebilir ve durum maili alabilirsiniz. Buraya tıklayarak Nagios'a ulaşabilirsiniz. Slack Nagios Entegrasyonu https://my.slack.com/services/new/nagios adresinde yer alan \"Add Nagios integration\" kısmı içerisinde yer alan Setup Instructions başlığı altında kurulum talimatlarına ulaşabilirsiniz. Sizler için takımınıza ait kanal ismi ve token bilgisi dinamik olarak üretilecektir. wget https : //raw.github.com/tinyspeck/services-examples/master/nagios.pl cp nagios . pl / usr / local / bin / slack_nagios . pl chmod 755 / usr / local / bin / slack_nagios . pl slack_nagios.pl dosyası içerisinde bizlere özel teamname ve token bilgisini düzenleyelim. my $opt_domain = \"teamname.slack.com\" ; # Your team's domain my $opt_token = \"token\" ; # The token from your Nagios services page Nagios bildirimlerin kimlere gönderileceği dair yapılandırma ayarlarını /etc/nagios3/conf.d/contacts_nagios2.cfg dosyasında tutmaktadır. define contact { contact_name slack alias Slack service_notification_period 24 x7 host_notification_period 24 x7 service_notification_options w , u , c , r host_notification_options d , r service_notification_commands notify - service - by - slack host_notification_commands notify - host - by - slack } Yukarıdaki contact tanımlaması ile birlikte yeni bir bildirim türü belirledik. Service Notification Options parametreleri Parametre Açıklama w Warning durumlarında bildirim gönderir. u Unknown durumlarında bildirim gönderir. c Kritik durumlarda bildirim gönderir. r Servisin tekrar ayağa kalkma durumunda bildirim gönderir. f Servisin start/stop durum analizini gönderir. s Zamanlanmış aralıklarda bildirim gönderir. Host Notification Options parametreleri Parametre Açıklama d Hostun down olması durumunda bildirim gönderir. u Hostun UNREACHABLE olduğu durumlarda bildirim gönderir. r Hostun tekrar ayağa kalkma durumunda bildirim gönderir. f Hostun start/stop durum analizini gönderir. s Zamanlanmış aralıklarda bildirim gönderir. Nagios bildirim komutlarını tanımlayalım Contact profilini tanımlarken service_notification_commands ve host_notification_commands parametrelerini kullanmıştım. Şimdi commands.cfg dosyası içerisinde bu komutlarını tanımlayalım. Bu dosyayı \"/etc/nagios3/commands.cfg\" adresinden ulaşabilirsiniz. define command { command_name notify - service - by - slack command_line / usr / local / bin / slack_nagios . pl - field slack_channel = # nagios - field HOSTALIAS = \"$HOSTNAME$\" - field SERVICEDESC = \"$SERVICEDESC$\" - field SERVICESTATE = \"$SERVICESTATE$\" - field SERVICEOUTPUT = \"$SERVICEOUTPUT$\" - field NOTIFICATIONTYPE = \"$NOTIFICATIONTYPE$\" } define command { command_name notify - host - by - slack command_line / usr / local / bin / slack_nagios . pl - field slack_channel = # nagios - field HOSTALIAS = \"$HOSTNAME$\" - field HOSTSTATE = \"$HOSTSTATE$\" - field HOSTOUTPUT = \"$HOSTOUTPUT$\" - field NOTIFICATIONTYPE = \"$NOTIFICATIONTYPE$\" } Ben Nagios üzerine MySQL server kontrolünü de eklemiştim. Şimdi MySQL servisimizi durduralım. 18:34:36'da MySQL servisi durdurdum. 18:35:19'da da Nagios MySQL servisine erişemediğine dair bildirimi göndermiş. Aynı esnada cep telefonuma da bildirim geldi.","tags":"Sistem Yöneticiliği","title":"[SLACK] Nagios Entegrasyonu"},{"url":"https://www.mustafa.com.tr/slack-ssh-girislerini-bildirim-olarak-almak.html","text":"Merhabalar. Bu yazımızda daha çok geliştirici ekiplerinin kullandığı ekip içi yazışma ortamı sağlayan Slack ile ilgili çalışma gerçekleştireceğiz. Artık ekip içi yazışmalarınızı, iş atamalarınızı (busybot) Slack üzerinden yaptığınıza göre fazlalıklardan kurtulmak isteyebilirsiniz. Şahsen ben çok fazla ortam kullanmayı tercih etmek yerine, tek yerden bir dashboard mantığında herşeyi görebilmek isterim. Kısa bir girizgahından ardından giriş yapalım. Slack'de çoğu uygulama gibi webhook yapısına uygun tasarlanmıştır. Webhook farklı uygulamaların birbirleri ile entegrasyon sağlayabilmeleri için Uygulama içerisinde oluşan event'leri HTTP üzerinden JSON Payload'ları ile kendilerine subscribe olan diğer uygulamaları tetiklemesidir. Tabii bu işlemi yapabilmeniz için webhook izinlerini sağlamanız gerekmektedir. Slack için token oluşturalım. Buraya tıklayarak Integration Settings alanından yapılandırma ayarlarına ulaşabilirsiniz. Post to Channel: Gönderim yapacağınız kanal Webhook URL : Kanalı seçmeniz ardından bu URL dinamik olarak oluşacaktır. Bu URL'yi sonra ki aşamalarda kullanacağımızdan dolayı saklamanız gerekmektedir. Descriptive Label: Dilerseniz opsiyonel olarak açıklama etiketi girebilirsiniz. Customize Name: Gelen bildirimlerde yer alan kullanıcı adını seçebilirsiniz. Customize Icon: Gelen bildirimlerde yer alan iconu değiştirebilirsiniz. Preview Message: Bu alandan da gelecek bildirimi önizleme olarak görebilirsiniz. Ayarları \"Save Settings\" butonu ile birlikte kaydediyoruz. SSH ile yapılan girişlerde bildirim gelmesini sağlayalım. /etc/profile dosyasını editör ile açtıktan sonra en alt kısmına aşağıdaki kod blogunu ekleyebilirsiniz. \"WEBHOOK_URL\" alanını yukarıda saklamanızı istediğim alanla değiştirmeyi unutmayınız. if [ -n \" $SSH_CLIENT \" ]; then TEXT=\"$(date): ssh login to ${ USER } @$(hostname -f)\" TEXT=\" $TEXT from $(echo $SSH_CLIENT |awk '{print $1}')\" curl -X POST \\ --data-urlencode \"payload={\\\"username\\\": \\\"SSH Login Alerts\\\", \\\"text\\\": \\\" ${ TEXT } \\\"}\" \\ WEBHOOK_URL & >/dev/null & fi Yukarıdaki kod blogunu açıklamak gerekirse, sadece SSH işlemlerinde çalışacak şekilde ayarlanmıştır. date parametresinde zaman damgası, $USER bağlantıyı gerçekleştiren kullanıcı, $hostname ise bağlantı yapılan makina adını içerir. $SSH_CLIENT ise bağlantıyı gerçekleştiren kullanıcının IP adresini içerir ve bu AWK ile sadeleştirilmiştir. Akabinde curl ile birlikte POST isteği gerçekleştiriyoruz. Curl istekleri sonrasında response değerlerinin ekrana yazdırılmaması için /dev/null değeri kullandım. Böylece ssh yapan kullanıcı hiçbir şekilde çıktı göremeyecektir. Kendim Slack uygulamasını mobilde de kullandığımdan dolayı bildirimler cep telefonuma da direkt ulaşmaktadır. Hepsi bu kadar.","tags":"Sistem Yöneticiliği","title":"[SLACK] SSH Girişlerini Bildirim Olarak Almak"},{"url":"https://www.mustafa.com.tr/vsftpd-kurulumu-ve-yapilandirma.html","text":"Yazımıza başlamadan önemli bir hatırlatmak isterim. FTP Protokolü cleartext trafik içermesi nedeniyle güvenli değildir. Bu yüzden SFTP protokolünü kullanmanızı öneririm. Kurulum Vsftpd server Ubuntu'nun default repolarından erişilebilmektedir. Ek olarak bir kaynak belirtmenize gerek yoktur. sudo apt - get install vsftpd Yapılandırma Vsftpd kurulumu ardından etc/vsftpd.conf dosyası içerisinde yapılandırma ayarları bulunmaktadır. Bu dosya içerisinde aşağıdaki değişiklikleri yapmanızı öneririm. FTP için anonymous bağlantı gerçekleştirmelerini kapatmak için aşağıdaki değeri varsa yorum satırından çıkartıp, \"NO\" olarak belirtiyoruz. anonymous_enable = NO Sunucu üzerinde yer alan kullanıcıların FTP'ye bağlanabilmelerini sağlamaları amacıyla aşağıdaki değeri varsa yorum satırından çıkartıp, \"YES\" olarak belirtiyoruz. local_enable = YES Kullanıcıların dosyalar üzerinde yazma işlemi yapabilmelerini sağlamaları amacıyla aşağıdaki değeri \"YES\" olarak belirtiyoruz. write_enable = YES Kullanıcıların home dizinlerine erişim hakkı vermek amacıyla aşağıdaki değeri \"YES\" olarak belirtiyoruz. chroot_local_user = YES Bu dosyayı kaydedip, çıkıyoruz. FTP Kullanıcı Hesabı Oluşturma Kullanıcı oluşturalım. sudo adduser ftpkullanicisi Kullanıcıyı oluşturduktan sonra, bu kullanıcıya ait dizin için root sahipliği verelim. sudo chown root : root / home / ftpkullanicisi Şimdi ise kullanıcıya dosyalarını gönderebileceği bir klasör oluşturalım ve bu kullanıcıya erişim hakkı verelim. sudo mkdir / home / ftpkullanicisi / dosyalar sudo chown ftpuser : ftpuser / home / ftpkullanicisi / files Vsftpd'yi yeniden başlatalım. sudo service vsftpd restart Tüm işlem bu kadar.","tags":"Sistem Yöneticiliği","title":"VSFTPD Kurulumu ve Yapılandırma"},{"url":"https://www.mustafa.com.tr/public-private-ile-ssh-baglantisi-saglama.html","text":"Bu yazımızda public/private ikilisi ile birlikte SSH bağlantısı sağlamayı akabinde ise sunucu üzerinde clear parola girilmesini yani pub/private ikilileri olmadan bağlantı sağlanamamasını gerçekleştireceğiz. Openssh-server kurulu değilse öncelikle olarak kurulumunu gerçekleştirin. sudo apt - get install openssh - server Client bilgisayar üzerinde anahtarlarınızı aşağıdaki komut ile birlikte oluşturalım. sudo ssh - keygen - t rsa root/.ssh dizini altına id_rsa ve id_rsa.pub dosyaları oluşturulmuş olacaktır. id_rsa.pub dosyanız uzantısından da anlaşılacağı üzere public key dosyanızdır. id_rsa ise iyi korunaklı saklamanız gereken private key dosyanızdır. Artık public anahtarımızı bağlantı yapacağımız sunucuya gönderelim. cat ~/ . ssh / id_rsa . pub | ssh root @ ip ' umask 077 ; cat >> . ssh / authorized_keys ' Client bilgisayarda artık aşağıdaki komut ile birlikte uzak sunucuya parola gerektirmeksizin bağlantı yapabilirsiniz. ssh uzaksunucu_ip Artık public/private ikilisi ile birlikte bağlantı yaptığımıza göre uzak sunucu üzerinde parola ile girişleri kapatabiliriz. Bunun için /etc/ssh/sshd_config kısmında aşağıdaki satırı bularak, # Change to no to disable tunnelled clear text passwords #PasswordAuthentication yes bununla değiştiriniz. # Change to no to disable tunnelled clear text passwords PasswordAuthentication no service ssh restart","tags":"Sistem Yöneticiliği","title":"Public / Private ile SSH Bağlantısı Sağlama"}]}