{"pages":[{"url":"https://www.mustafa.com.tr/pages/about.html","text":"2004 yılından bu yana siber güvenlik üzerine araştırmalarda bulundum. Çok sayıda yerli yada yabancı websitelerinde bulunan zaafiyetleri ilgililere göndererek kapatılmasını sağladım. Bu siteler içerisinde ülkemizde eğitim veren üniversiteler, kurumsal firmaları, devlet kurumları sistemleri bulunmaktadır. Bu bildirimler sonucunda naçizane bir ödül olarak ilgili kurumların yetkililerince verilmiş olan çok sayıda teşekkür belgem bulunmaktadır. İşimden arta kalan vakitlerimde üniversitelerde, eğitim öğretim kurumlarında, firmalarda web ve bilgi güvenliği üzerine seminer, sunum ve konferanslar vermekteyim. Octosec bilgi güvenliği grubu üyesiyim. Herhangi bir konuda bana iletişim sayfasından ya da linkedin profilimden ulaşabilirsiniz. Eğitmen 2016: Güvenlik 101 - Uzem Yazılım Kampı - Samsun 2016: Web Uygulama Güvenliği - Hacktrick'16 Güvenlik Konferansı - Eskişehir Anadolu Üniv. 2016: Web Uygulama Güvenliği - Hacker Kamp - Sakarya Üniversitesi 2016: Enine Boyuna Siber Güvenlik - Hacker Kamp - İstanbul Üniversitesi 2016: Enine Boyuna Siber Güvenlik - Akademik Bilişim 2016 - Aydın 2015: Uygulamalı Sızma Testi - İzHack 2015 - İzmir 2015: Uygulamalı Sızma Testi - OMÜ Hacker Kamp 2015 - Samsun 2015: Güvenlik 101 - UZEM Yazılım Kampı - Samsun 2015: Web Uygulama Güvenliği - Hacktrick'15 Güvenlik Konferansı - İstanbul Sunum 2015: Devlet Kurumları ve Siber Güvenlik - Hacktrick'15 Güvenlik Konferansı - İstanbul 2015: Kamu Güvenliğini Sağlamada Siber İstihbaratın Rolü - Akademik Bilişim - Aydın 2012: Sosyal Medya ve Erişim Riskleri - İlkadım TML, EML - Samsun 2011: Ağ Güvenliği ve Sızma Testleri - Ondokuz Mayıs Üniversitesi - Samsun 2011: Kullanıcı Güvenliği - Ondokuz Mayıs Üniversitesi - Samsun 2008: Web Güvenlik Semineri - Samsun Katılımcı 2015: Siber Güvenlik Kış Kampı - Kayseri 2014: Hacktrick'14 Güvenlik Konferansı 2014: Güvenlik 101 - Akademik Bilişim - Mersin 2013: Comodo - Siber Güvenlik ve Hacking - Samsun 2011: Microsoft Web Erişim Riskleri - İstanbul 2011: Bilişim Güvenliği Zirvesi - İstanbul Sertifikasyon ve Yarışma 2014: TSE Sızma Testi Uzmanlığı (Sistem) 2014: TSE Sızma Testi Uzmanlığı (Web) 2014: Siber Meydan 2014 (CTF) 2009: Proje Tabanlı Beceri Yarışması, Samsun birinciliği, Karadeniz Bölgesi üçüncülüğü Son güncellenme tarihi : 11.09.2016","tags":"pages","title":"About"},{"url":"https://www.mustafa.com.tr/pages/contact.html","text":"E-posta: mustafa [@] altinkaynak [.] biz circletwitterbird circlegithubalt circlelinkedin","tags":"pages","title":"Contact"},{"url":"https://www.mustafa.com.tr/slack-ssh-girislerini-bildirim-olarak-almak.html","text":"Merhabalar. Bu yazımızda daha çok geliştirici ekiplerinin kullandığı ekip içi yazışma ortamı sağlayan Slack ile ilgili çalışma gerçekleştireceğiz. Artık ekip içi yazışmalarınızı, iş atamalarınızı (busybot) Slack üzerinden yaptığınıza göre fazlalıklardan kurtulmak isteyebilirsiniz. Şahsen ben çok fazla ortam kullanmayı tercih etmek yerine, tek yerden bir dashboard mantığında herşeyi görebilmek isterim. Kısa bir girizgahından ardından giriş yapalım. Slack'de çoğu uygulama gibi webhook yapısına uygun tasarlanmıştır. Webhook farklı uygulamaların birbirleri ile entegrasyon sağlayabilmeleri için Uygulama içerisinde oluşan event'leri HTTP üzerinden JSON Payload'ları ile kendilerine subscribe olan diğer uygulamaları tetiklemesidir. Tabii bu işlemi yapabilmeniz için webhook izinlerini sağlamanız gerekmektedir. Slack için token oluşturalım. Buraya tıklayarak Integration Settings alanından yapılandırma ayarlarına ulaşabilirsiniz. Post to Channel: Gönderim yapacağınız kanal Webhook URL : Kanalı seçmeniz ardından bu URL dinamik olarak oluşacaktır. Bu URL'yi sonra ki aşamalarda kullanacağımızdan dolayı saklamanız gerekmektedir. Descriptive Label: Dilerseniz opsiyonel olarak açıklama etiketi girebilirsiniz. Customize Name: Gelen bildirimlerde yer alan kullanıcı adını seçebilirsiniz. Customize Icon: Gelen bildirimlerde yer alan iconu değiştirebilirsiniz. Preview Message: Bu alandan da gelecek bildirimi önizleme olarak görebilirsiniz. Ayarları \"Save Settings\" butonu ile birlikte kaydediyoruz. SSH ile yapılan girişlerde bildirim gelmesini sağlayalım. /etc/profile dosyasını editör ile açtıktan sonra en alt kısmına aşağıdaki kod blogunu ekleyebilirsiniz. \"WEBHOOK_URL\" alanını yukarıda saklamanızı istediğim alanla değiştirmeyi unutmayınız. if [ -n \" $SSH_CLIENT \" ]; then TEXT=\"$(date): ssh login to ${ USER } @$(hostname -f)\" TEXT=\" $TEXT from $(echo $SSH_CLIENT |awk '{print $1}')\" curl -X POST \\ --data-urlencode \"payload={\\\"username\\\": \\\"SSH Login Alerts\\\", \\\"text\\\": \\\" ${ TEXT } \\\"}\" \\ WEBHOOK_URL & >/dev/null & fi Yukarıdaki kod blogunu açıklamak gerekirse, sadece SSH işlemlerinde çalışacak şekilde ayarlanmıştır. date parametresinde zaman damgası, $USER bağlantıyı gerçekleştiren kullanıcı, $hostname ise bağlantı yapılan makina adını içerir. $SSH_CLIENT ise bağlantıyı gerçekleştiren kullanıcının IP adresini içerir ve bu AWK ile sadeleştirilmiştir. Akabinde curl ile birlikte POST isteği gerçekleştiriyoruz. Curl istekleri sonrasında response değerlerinin ekrana yazdırılmaması için /dev/null değeri kullandım. Böylece ssh yapan kullanıcı hiçbir şekilde çıktı göremeyecektir. Kendim Slack uygulamasını mobilde de kullandığımdan dolayı bildirimler cep telefonuma da direkt ulaşmaktadır. Hepsi bu kadar.","tags":"Sistem Yöneticiliği","title":"[SLACK] SSH girişlerini bildirim olarak almak"},{"url":"https://www.mustafa.com.tr/vsftpd-kurulumu-ve-yapilandirma.html","text":"Yazımıza başlamadan önemli bir hatırlatmak isterim. FTP Protokolü cleartext trafik içermesi nedeniyle güvenli değildir. Bu yüzden SFTP protokolünü kullanmanızı öneririm. Kurulum Vsftpd server Ubuntu'nun default repolarından erişilebilmektedir. Ek olarak bir kaynak belirtmenize gerek yoktur. sudo apt - get install vsftpd Yapılandırma Vsftpd kurulumu ardından etc/vsftpd.conf dosyası içerisinde yapılandırma ayarları bulunmaktadır. Bu dosya içerisinde aşağıdaki değişiklikleri yapmanızı öneririm. FTP için anonymous bağlantı gerçekleştirmelerini kapatmak için aşağıdaki değeri varsa yorum satırından çıkartıp, \"NO\" olarak belirtiyoruz. anonymous_enable = NO Sunucu üzerinde yer alan kullanıcıların FTP'ye bağlanabilmelerini sağlamaları amacıyla aşağıdaki değeri varsa yorum satırından çıkartıp, \"YES\" olarak belirtiyoruz. local_enable = YES Kullanıcıların dosyalar üzerinde yazma işlemi yapabilmelerini sağlamaları amacıyla aşağıdaki değeri \"YES\" olarak belirtiyoruz. write_enable = YES Kullanıcıların home dizinlerine erişim hakkı vermek amacıyla aşağıdaki değeri \"YES\" olarak belirtiyoruz. chroot_local_user = YES Bu dosyayı kaydedip, çıkıyoruz. FTP Kullanıcı Hesabı Oluşturma Kullanıcı oluşturalım. sudo adduser ftpkullanicisi Kullanıcıyı oluşturduktan sonra, bu kullanıcıya ait dizin için root sahipliği verelim. sudo chown root : root / home / ftpkullanicisi Şimdi ise kullanıcıya dosyalarını gönderebileceği bir klasör oluşturalım ve bu kullanıcıya erişim hakkı verelim. sudo mkdir / home / ftpkullanicisi / dosyalar sudo chown ftpuser : ftpuser / home / ftpkullanicisi / files Vsftpd'yi yeniden başlatalım. sudo service vsftpd restart Tüm işlem bu kadar.","tags":"Sistem Yöneticiliği","title":"VSFTPD Kurulumu ve Yapılandırma"},{"url":"https://www.mustafa.com.tr/public-private-ile-ssh-baglantisi-saglama.html","text":"Bu yazımızda public/private ikilisi ile birlikte SSH bağlantısı sağlamayı akabinde ise sunucu üzerinde clear parola girilmesini yani pub/private ikilileri olmadan bağlantı sağlanamamasını gerçekleştireceğiz. Openssh-server kurulu değilse öncelikle olarak kurulumunu gerçekleştirin. sudo apt - get install openssh - server Client bilgisayar üzerinde anahtarlarınızı aşağıdaki komut ile birlikte oluşturalım. sudo ssh - keygen - t rsa root/.ssh dizini altına id_rsa ve id_rsa.pub dosyaları oluşturulmuş olacaktır. id_rsa.pub dosyanız uzantısından da anlaşılacağı üzere public key dosyanızdır. id_rsa ise iyi korunaklı saklamanız gereken private key dosyanızdır. Artık public anahtarımızı bağlantı yapacağımız sunucuya gönderelim. cat ~/ . ssh / id_rsa . pub | ssh root @ ip ' umask 077 ; cat >> . ssh / authorized_keys ' Client bilgisayarda artık aşağıdaki komut ile birlikte uzak sunucuya parola gerektirmeksizin bağlantı yapabilirsiniz. ssh uzaksunucu_ip Artık public/private ikilisi ile birlikte bağlantı yaptığımıza göre uzak sunucu üzerinde parola ile girişleri kapatabiliriz. Bunun için /etc/ssh/sshd_config kısmında aşağıdaki satırı bularak, # Change to no to disable tunnelled clear text passwords #PasswordAuthentication yes bununla değiştiriniz. # Change to no to disable tunnelled clear text passwords PasswordAuthentication no service ssh restart","tags":"Sistem Yöneticiliği","title":"Public / Private ile SSH bağlantısı sağlama"}]}